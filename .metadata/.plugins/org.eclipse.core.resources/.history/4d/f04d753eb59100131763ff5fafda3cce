package parser;

import java.awt.Point;
import java.awt.Rectangle;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import org.xml.sax.Attributes;

import BDDAccess.BDDAccess;
import Constants.DataTypeProperty;
import DAEStructure.Dataset;
import DAEStructure.PageElementPropertyValue;
import DAEStructure.PageElementToken;
import DAEStructure.PageElementZone;
import DAEStructure.PageImage;

public class MadcatToDae {
	private BDDAccess bdd;
	private Dataset dataset;
	private PageImage image;
	private HashMap zones;
	private PageElementZone zone;
	private boolean inToken = false;
	private String boundary = "";
	private HashMap tokens;
	private PageElementToken token = new PageElementToken();
	private Rectangle rectangle;
	public MadcatToDae(){
		bdd = new BDDAccess();
		zones = new HashMap();
		tokens = new HashMap();
	}
	
	public void insertDoc(Attributes attributes){
		String id = attributes.getValue("id");
		String src = attributes.getValue("src");
		String nbPages = attributes.getValue("nbpages");
		String type = attributes.getValue("type");
		
		dataset = new Dataset();
		dataset.setName(id);
		dataset.setPurpose(type);
		
		PageElementPropertyValue pepv = new PageElementPropertyValue();
		pepv.setName("Dataset " + id + " : number of pages");
		pepv.setValue(nbPages);
		pepv.setValueTypeId(DataTypeProperty.NBPAGES);
		
		
		try {
			if(dataset.insert(bdd)){
				pepv.insertWithDataset(bdd, dataset.getId());
			}
		} catch (SQLException e) {
			System.err.println("Fail to insert dataset " + id); 
			e.printStackTrace();
		}
		
	}
	
	public void insertWriter(Attributes attributes){
		String id = attributes.getValue("id");
		
		try {
			bdd.insertContributor(dataset.getId(), id);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void insertPage(Attributes attributes){
		String id = attributes.getValue("id");
		int dpi = Integer.parseInt(attributes.getValue("dpi"));
		int colordepth = Integer.parseInt(attributes.getValue("colordepth"));
		int width = Integer.parseInt(attributes.getValue("width"));
		int height = Integer.parseInt(attributes.getValue("height"));
		
		image = new PageImage();
		image.setName(id);
		image.setHdpi(dpi);
		image.setVdpi(dpi);
		image.setWidth(width);
		image.setHeight(height);
		/* Ne peut pas Ãªtre mis dans DAE pour le moment
		image.setColordepth(colordepth); 
		*/
		
		try {
			image.insert(bdd, dataset);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void prepareZone(Attributes attributes){
		String id = attributes.getValue("id");
		String type = attributes.getValue("type");
		
		zone = new PageElementZone();
		zone.setName(id);
		zone.setType(type);
		
	}
	
	public void addPoint(Attributes attributes){
		int x = Integer.parseInt(attributes.getValue("x"));
		int y = Integer.parseInt(attributes.getValue("y"));
		
		if(!inToken){
			boundary += "(" + x + "," + y + ");";
		}
		if(inToken){
			Point point = new Point();
			point.setLocation(x, y);
			rectangle.add(point);
		}
	}
	
	public void endZone(){
		
		// remove last ";" in boundary
		int index = boundary.lastIndexOf(';');
		boundary = boundary.substring(0, index-1);
		System.out.println(boundary);
		
		
		zone.setBoundary(boundary);
		zones.put(zone.getName(), zone);
	}
	
	public void prepareToken(Attributes attributes){
		String id = attributes.getValue("id");
		rectangle = new Rectangle();
		
		token = new PageElementToken();
		token.setName(id);
	}
	
	public void endToken(){
		token.setHeight(rectangle.height);
		token.setWidth(rectangle.width);
		token.setTopLeftX(rectangle.x);
		token.setTopLeftY(rectangle.y);
		
		tokens.put(token.getName(), token);
		
	}
	
}
